{
  "cycle": null,
  "goal_id": "auto_goal_2",
  "description": "Improve testing: Test coverage analysis and improvement needed",
  "current_code": "# File: src/ai_self_ext_engine/test_utils.py\nimport subprocess\nimport logging\nfrom pathlib import Path\nfrom typing import Optional, Dict, Any\n\nlogger = logging.getLogger(__name__)\n\ndef run_tests(\n    project_root: Path,\n    test_path: Path,\n    coverage_report_dir: Optional[Path] = None\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs pytest tests for the specified path within the project root,\n    optionally generating a coverage report.\n\n    Args:\n        project_root: The root directory of the project. Pytest will be run from here.\n                      Coverage will be measured relative to this root.\n        test_path: The path to the tests (file or directory) relative to `project_root`.\n                   e.g., Path(\"tests/unit/test_my_module.py\") or Path(\"tests/\").\n        coverage_report_dir: Optional path to a directory where the coverage XML report\n                             should be saved. If None, no XML report is generated.\n                             The report will be named '.coverage.xml' within this directory.\n\n    Returns:\n        A dictionary containing:\n        - 'success': bool, True if tests passed (return code 0), False otherwise.\n        - 'stdout': str, The standard output from the pytest command.\n        - 'stderr': str, The standard error from the pytest command.\n        - 'coverage_xml_path': Optional[Path], The path to the generated coverage XML report,\n                               if requested and successfully created.\n    \"\"\"\n    results: Dict[str, Any] = {\n        'success': False,\n        'stdout': '',\n        'stderr': '',\n        'coverage_xml_path': None\n    }\n\n    # Ensure pytest is available\n    try:\n        subprocess.run([\"pytest\", \"--version\"], check=True, capture_output=True)\n    except FileNotFoundError:\n        logger.error(\"Pytest is not installed or not in PATH. Please install it (e.g., pip install pytest pytest-cov).\")\n        results['stderr'] = \"Pytest not found.\"\n        return results\n    except subprocess.CalledProcessError as e:\n        logger.error(f\"Error checking pytest version: {e.stderr.decode()}\")\n        results['stderr'] = f\"Error checking pytest version: {e.stderr.decode()}\"\n        return results\n\n    # Construct the pytest command\n    cmd = [\"pytest\"]\n\n    if coverage_report_dir:\n        # Ensure coverage directory exists\n        coverage_report_dir.mkdir(parents=True, exist_ok=True)\n        coverage_xml_path = coverage_report_dir / \".coverage.xml\"\n\n        # Add coverage flags\n        # --cov=. will measure coverage for the entire project from project_root\n        # --cov-report=xml:path/to/.coverage.xml will save the report\n        # --cov-report=term-missing will show missing lines in console\n        cmd.extend([\n            f\"--cov={project_root}\",\n            f\"--cov-report=xml:{coverage_xml_path}\",\n            \"--cov-report=term-missing\"\n        ])\n\n    cmd.append(str(test_path)) # Add the specific test path or directory\n\n    logger.info(f\"Running tests from '{test_path}' with command: {' '.join(cmd)} in directory '{project_root}'\")\n\n    try:\n        process = subprocess.run(cmd, cwd=project_root, capture_output=True, text=True, check=False)\n        results['stdout'] = process.stdout\n        results['stderr'] = process.stderr\n        results['success'] = process.returncode == 0\n        if results['success'] and coverage_report_dir:\n            results['coverage_xml_path'] = coverage_xml_path\n    except Exception as e:\n        logger.exception(f\"An unexpected error occurred while running tests for {test_path}: {e}\")\n        results['stderr'] += f\"\\nAn unexpected error occurred: {e}\"\n\n\n",
  "todos": [
    {
      "file_path": "src/ai_self_ext_engine/test_utils.py",
      "change_type": "modify",
      "description": "Add a utility function to run tests with coverage and output a coverage report."
    }
  ],
  "patch": "--- a/src/ai_self_ext_engine/test_utils.py\n+++ b/src/ai_self_ext_engine/test_utils.py\n@@ -9,27 +9,34 @@\n def run_tests(\n     project_root: Path,\n     test_path: Path,\n-    coverage_report_dir: Optional[Path] = None\n+    coverage_output_dir: Optional[Path] = None,\n+    generate_html_report: bool = False\n ) -> Dict[str, Any]:\n     \"\"\"\n     Runs pytest tests for the specified path within the project root,\n-    optionally generating a coverage report.\n+    optionally generating a comprehensive code coverage report (XML and HTML).\n \n     Args:\n         project_root: The root directory of the project. Pytest will be run from here.\n                       Coverage will be measured relative to this root.\n         test_path: The path to the tests (file or directory) relative to `project_root`.\n                    e.g., Path(\"tests/unit/test_my_module.py\") or Path(\"tests/\").\n-        coverage_report_dir: Optional path to a directory where the coverage XML report\n-                             should be saved. If None, no XML report is generated.\n-                             The report will be named '.coverage.xml' within this directory.\n+        coverage_output_dir: Optional path to a directory where the coverage XML and HTML reports\n+                             should be saved. If None, no coverage reports are generated.\n+                             The XML report will be named '.coverage.xml' and HTML in 'htmlcov' within this directory.\n+        generate_html_report: If True, an HTML coverage report will be generated in a subdirectory\n+                              named 'htmlcov' within `coverage_output_dir`.\n \n     Returns:\n         A dictionary containing:\n         - 'success': bool, True if tests passed (return code 0), False otherwise.\n         - 'stdout': str, The standard output from the pytest command.\n         - 'stderr': str, The standard error from the pytest command.\n         - 'coverage_xml_path': Optional[Path], The path to the generated coverage XML report,\n                                if requested and successfully created.\n+        - 'coverage_html_path': Optional[Path], The path to the generated coverage HTML report directory,\n+                                if requested and successfully created.\n     \"\"\"\n     results: Dict[str, Any] = {\n         'success': False,\n         'stdout': '',\n-        'stderr': '',\n-        'coverage_xml_path': None\n+        'stderr': '', # context line\n+        'coverage_xml_path': None,\n+        'coverage_html_path': None\n     }\n \n     # Ensure pytest is available\n@@ -51,9 +58,9 @@\n     # Construct the pytest command\n     cmd = [\"pytest\"]\n \n-    if coverage_report_dir:\n+    if coverage_output_dir:\n         # Ensure coverage directory exists\n-        coverage_report_dir.mkdir(parents=True, exist_ok=True)\n-        coverage_xml_path = coverage_report_dir / \".coverage.xml\"\n+        coverage_output_dir.mkdir(parents=True, exist_ok=True)\n+        coverage_xml_path = coverage_output_dir / \".coverage.xml\"\n \n         # Add coverage flags\n         # --cov=. will measure coverage for the entire project from project_root\n@@ -63,6 +70,9 @@\n             f\"--cov={project_root}\",\n             f\"--cov-report=xml:{coverage_xml_path}\",\n             \"--cov-report=term-missing\"\n         ])\n+        if generate_html_report:\n+            coverage_html_path = coverage_output_dir / \"htmlcov\"\n+            cmd.append(f\"--cov-report=html:{coverage_html_path}\")\n \n     cmd.append(str(test_path)) # Add the specific test path or directory\n \n@@ -72,9 +82,12 @@\n         process = subprocess.run(cmd, cwd=project_root, capture_output=True, text=True, check=False)\n         results['stdout'] = process.stdout\n         results['stderr'] = process.stderr\n         results['success'] = process.returncode == 0\n-        if results['success'] and coverage_report_dir:\n+        if results['success'] and coverage_output_dir:\n             results['coverage_xml_path'] = coverage_xml_path\n+            if generate_html_report:\n+                results['coverage_html_path'] = coverage_html_path\n     except Exception as e:\n         logger.exception(f\"An unexpected error occurred while running tests for {test_path}: {e}\")\n         results['stderr'] += f\"\\nAn unexpected error occurred: {e}\"\n+\n+    return results",
  "test_results": null,
  "accepted": false,
  "should_abort": true,
  "metadata": {}
}