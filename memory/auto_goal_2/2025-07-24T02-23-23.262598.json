{
  "cycle": null,
  "goal_id": "auto_goal_2",
  "description": "Improve testing: Test coverage analysis and improvement needed",
  "current_code": "# File: src/ai_self_ext_engine/test_utils.py\nimport subprocess\nimport logging\nfrom pathlib import Path\nfrom typing import Optional, Dict, Any\n\nlogger = logging.getLogger(__name__)\n\ndef run_tests(\n    project_root: Path,\n    test_path: Path,\n    coverage_report_dir: Optional[Path] = None\n) -> Dict[str, Any]:\n    \"\"\"\n    Runs pytest tests for the specified path within the project root,\n    optionally generating a coverage report.\n\n    Args:\n        project_root: The root directory of the project. Pytest will be run from here.\n                      Coverage will be measured relative to this root.\n        test_path: The path to the tests (file or directory) relative to `project_root`.\n                   e.g., Path(\"tests/unit/test_my_module.py\") or Path(\"tests/\").\n        coverage_report_dir: Optional path to a directory where the coverage XML report\n                             should be saved. If None, no XML report is generated.\n                             The report will be named '.coverage.xml' within this directory.\n\n    Returns:\n        A dictionary containing:\n        - 'success': bool, True if tests passed (return code 0), False otherwise.\n        - 'stdout': str, The standard output from the pytest command.\n        - 'stderr': str, The standard error from the pytest command.\n        - 'coverage_xml_path': Optional[Path], The path to the generated coverage XML report,\n                               if requested and successfully created.\n    \"\"\"\n    results: Dict[str, Any] = {\n        'success': False,\n        'stdout': '',\n        'stderr': '',\n        'coverage_xml_path': None\n    }\n\n    # Ensure pytest is available\n    try:\n        subprocess.run([\"pytest\", \"--version\"], check=True, capture_output=True)\n    except FileNotFoundError:\n        logger.error(\"Pytest is not installed or not in PATH. Please install it (e.g., pip install pytest pytest-cov).\")\n        results['stderr'] = \"Pytest not found.\"\n        return results\n    except subprocess.CalledProcessError as e:\n        logger.error(f\"Error checking pytest version: {e.stderr.decode()}\")\n        results['stderr'] = f\"Error checking pytest version: {e.stderr.decode()}\"\n\n",
  "todos": [
    {
      "file_path": "src/ai_self_ext_engine/test_utils.py",
      "change_type": "modify",
      "description": "Implement a function `run_tests_with_coverage` to execute existing unit tests and generate a code coverage report, integrating a suitable coverage tool.",
      "line_start": 1,
      "line_end": 50
    }
  ],
  "patch": "--- a/src/ai_self_ext_engine/test_utils.py\n+++ b/src/ai_self_ext_engine/test_utils.py\n@@ -42,3 +42,38 @@\n     except Exception as e:\n         logger.exception(f\"An unexpected error occurred while running tests for {test_path}: {e}\")\n         results['stderr'] += f\"\\nAn unexpected error occurred: {e}\"\n+\n+    return results\n+\n+\n+def run_tests_with_coverage(\n+    project_root: Path,\n+    test_path: Path,\n+    coverage_report_dir: Path\n+) -> Dict[str, Any]:\n+    \"\"\"\n+    Runs pytest tests for the specified path within the project root and generates\n+    a code coverage report. This function is a wrapper around `run_tests`\n+    specifically for scenarios requiring coverage.\n+\n+    Args:\n+        project_root: The root directory of the project. Pytest will be run from here.\n+                      Coverage will be measured relative to this root.\n+        test_path: The path to the tests (file or directory) relative to `project_root`.\n+                   e.g., Path(\"tests/unit/test_my_module.py\") or Path(\"tests/\").\n+        coverage_report_dir: Path to a directory where the coverage XML report\n+                             should be saved. The report will be named '.coverage.xml'\n+                             within this directory.\n+\n+    Returns:\n+        A dictionary containing:\n+        - 'success': bool, True if tests passed (return code 0), False otherwise.\n+        - 'stdout': str, The standard output from the pytest command.\n+        - 'stderr': str, The standard error from the pytest command.\n+        - 'coverage_xml_path': Optional[Path], The path to the generated coverage XML report.\n+        - 'coverage_data': Optional[Dict], Parsed coverage metrics from the XML report.\n+    \"\"\"\n+    if not coverage_report_dir:\n+        logger.error(\"coverage_report_dir must be provided for run_tests_with_coverage.\")\n+        return {'success': False, 'stdout': '', 'stderr': \"coverage_report_dir is required.\", 'coverage_xml_path': None}\n+\n+    # Delegate to the more general run_tests function\n+    return run_tests(project_root, test_path, coverage_report_dir)",
  "test_results": null,
  "accepted": false,
  "should_abort": true,
  "metadata": {}
}