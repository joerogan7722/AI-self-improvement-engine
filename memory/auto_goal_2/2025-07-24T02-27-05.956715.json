{
  "cycle": null,
  "goal_id": "auto_goal_2",
  "description": "Improve testing: Test coverage analysis and improvement needed",
  "current_code": "# File: src/ai_self_ext_engine/cli.py\n\n        return json.dumps(log_record)\n\ndef _setup_logging(log_config: LoggingConfig):\n    \"\"\"Configures the root logger based on the provided logging configuration.\"\"\"\n    level_map = {level: getattr(logging, level.upper()) for level in [\"debug\", \"info\", \"warning\", \"error\", \"critical\"]}\n    log_level = level_map.get(log_config.level.lower(), logging.INFO)\n\n    root_logger = logging.getLogger()\n    root_logger.setLevel(log_level)\n    for handler in root_logger.handlers[:]: # Clear existing handlers\n        root_logger.removeHandler(handler)\n\n    # Console handler\n    console_handler = logging.StreamHandler(sys.stderr)\n    console_handler.setLevel(log_level)\n\n    if log_config.format == \"json\":\n        formatter = JsonFormatter()\n    else:\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s')\n\n    console_handler.setFormatter(formatter)\n    root_logger.addHandler(console_handler)\n\n    # File handler (if log_file is specified)\n    if log_config.log_file:\n        log_file_path = Path(log_config.log_file)\n        log_file_path.parent.mkdir(parents=True, exist_ok=True) # Ensure log directory exists\n        file_handler = logging.FileHandler(log_file_path, encoding='utf-8')\n        file_handler.setLevel(log_level)\n\n",
  "todos": [
    {
      "file_path": "src/ai_self_ext_engine/cli.py",
      "change_type": "modify",
      "description": "Extend CLI to include a new subcommand or option for running unit tests and generating a comprehensive code coverage report for the engine.",
      "line_start": 30,
      "line_end": 60
    }
  ],
  "patch": "--- a/src/ai_self_ext_engine/cli.py\n+++ b/src/ai_self_ext_engine/cli.py\n@@ -1,6 +1,9 @@\n         return json.dumps(log_record)\n \n+import typer\n+from typing import Optional\n+from src.ai_self_ext_engine.test_utils import run_tests_with_coverage\n+\n def _setup_logging(log_config: LoggingConfig):\n     \"\"\"Configures the root logger based on the provided logging configuration.\"\"\"\n     level_map = {level: getattr(logging, level.upper()) for level in [\"debug\", \"info\", \"warning\", \"error\", \"critical\"]}\n@@ -23,3 +26,69 @@\n         log_file_path = Path(log_config.log_file)\n         log_file_path.parent.mkdir(parents=True, exist_ok=True) # Ensure log directory exists\n         file_handler = logging.FileHandler(log_file_path, encoding='utf-8')\n         file_handler.setLevel(log_level)\n+\n+# Initialize the Typer application\n+app = typer.Typer()\n+\n+# Get a logger for this module\n+logger = logging.getLogger(__name__)\n+\n+@app.command(name=\"test\", help=\"Run unit tests and generate a comprehensive code coverage report.\")\n+def run_tests_command(\n+    tests_path: Optional[Path] = typer.Argument(\n+        None,\n+        help=\"Path to tests (file or directory). Defaults to 'tests' directory if exists.\",\n+        exists=True,\n+        file_okay=True,\n+        dir_okay=True,\n+        readable=True,\n+    ),\n+    coverage_report_dir: Path = typer.Option(\n+        Path(\"coverage_reports\"),\n+        \"--coverage-report-dir\",\n+        \"-crd\",\n+        help=\"Directory to save the code coverage XML report.\",\n+        writable=True,\n+    ),\n+    project_root: Path = typer.Option(\n+        Path(\".\"),\n+        \"--project-root\",\n+        \"-pr\",\n+        help=\"The root directory of the project for coverage measurement.\",\n+        exists=True,\n+        dir_okay=True,\n+        readable=True,\n+    ),\n+):\n+    \"\"\"\n+    Runs unit tests and generates a comprehensive code coverage report.\n+    \"\"\"\n+    if tests_path is None:\n+        # Prioritize 'tests' in project root, then 'src/ai_self_ext_engine/tests', then 'src/tests'\n+        if (project_root / \"tests\").is_dir():\n+            tests_path = project_root / \"tests\"\n+        elif (project_root / \"src\" / \"ai_self_ext_engine\" / \"tests\").is_dir():\n+             tests_path = project_root / \"src\" / \"ai_self_ext_engine\" / \"tests\"\n+        elif (project_root / \"src\" / \"tests\").is_dir():\n+             tests_path = project_root / \"src\" / \"tests\"\n+        else:\n+            logger.error(\"No specific tests path provided and no 'tests' directory found in common locations. Please specify with 'ai-self-ext-engine test PATH_TO_TESTS'\")\n+            raise typer.Exit(code=1)\n+\n+    logger.info(f\"Running tests from: {tests_path.resolve()}\")\n+    logger.info(f\"Generating coverage report in: {coverage_report_dir.resolve()}\")\n+\n+    coverage_report_dir.mkdir(parents=True, exist_ok=True)\n+\n+    results = run_tests_with_coverage(project_root=project_root, test_path=tests_path, coverage_report_dir=coverage_report_dir)\n+\n+    if results['success']:\n+        logger.info(f\"\\nTests completed successfully.\")\n+        if results.get('coverage_xml_path'):\n+            logger.info(f\"Code coverage report generated at: {results['coverage_xml_path'].resolve()}\")\n+            if results.get('coverage_data'):\n+                logger.info(f\"Coverage Summary:\")\n+                for metric, value in results['coverage_data'].items():\n+                    logger.info(f\"  {metric.replace('_', ' ').title()}: {value}\")\n+        raise typer.Exit(code=0)\n+    else:\n+        logger.error(f\"\\nTests failed!\")\n+        logger.error(f\"Stdout:\\n{results['stdout']}\")\n+        logger.error(f\"Stderr:\\n{results['stderr']}\")\n+        raise typer.Exit(code=1)",
  "test_results": {
    "passed": false,
    "error": "pytest not found"
  },
  "accepted": false,
  "should_abort": true,
  "metadata": {}
}